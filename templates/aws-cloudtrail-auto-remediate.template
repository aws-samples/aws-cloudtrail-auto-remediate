# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.  
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Description: >
  Sample stack illustrating security response automation concepts.  This stack is intended for demonstration purposes only.
  You will be billed for the AWS resources used if you create a stack from this template. 

AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  SecurityContactEmail:
    Description: Email address to receive notifications. Must be a valid email address.
    Type: String
    AllowedPattern: ^(?:[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+\/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Configuration
      Parameters:
      - SecurityContactEmail
    ParameterLabels:
      AdminEmail:
        default: Notification email (REQUIRED)


Resources:

  CloudTrailStartLoggingLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Function restarts the stopped trail in CloudTrail"
      Handler : "index.handler"
      MemorySize: 1024
      Timeout: 300
      Role: !GetAtt CloudTrailStartLoggingIAMRole.Arn
      Runtime : "python3.7"
      Environment:
        Variables:
          SNSTOPIC: !Ref CloudTrailStartLoggingSNSTopic
      Code:
        ZipFile: |
          # Description: Lambda function that restarts CloudTrail logging and sends a notification.
          #
          import boto3
          import logging
          import os
          import botocore.session
          from botocore.exceptions import ClientError
          session = botocore.session.get_session()

          logging.basicConfig(level=logging.DEBUG)
          logger=logging.getLogger(__name__)

          # Lambda function invoked if AWS CloudTrail logging is detected as stopped.
          # The function automatically re-enables AWS CloudTrail logging 
          # and publishes a notification to an SNS Topic.

          def handler(event, context):
              # the most verbose level - this function should be rarely invoked, but carefully logged
              logger.setLevel(logging.DEBUG)
              
              # extract trail ARN by parsing the incoming Security Hub finding (in JSON format)
              trailARN = event['detail']['findings'][0]['ProductFields']['action/awsApiCallAction/affectedResources/AWS::CloudTrail::Trail']
              
              # description contains useful details to be sent to security operations
              description = event['detail']['findings'][0]['Description']
              
              #Get the SNS Topic ARN passed in by the environment variable
              snsARN = os.environ['SNSTOPIC']
              
              # write out details to logs for better audit path
              logger.debug("Event is-- %s" %event)
              logger.debug("trailARN is--- %s" %trailARN)
              logger.debug("snsARN is-- %s" %snsARN) 
              snsclient = boto3.client('sns')
              
              #Sending the notification that the AWS CloudTrail has been disabled.
              snspublish = snsclient.publish(
                  TargetArn = snsARN,
                  Message="Automatically restarting CloudTrail logging.  Event description: \"%s\" " %description,
                  )
              logger.debug("SNS Publish Response- %s" %snspublish)
                 
              #Enabling the AWS CloudTrail logging
              try:
                  client = boto3.client('cloudtrail')
                  enablelogging = client.start_logging(Name=trailARN)
                  logger.debug("Response on enable CloudTrail logging- %s" %enablelogging)
              except ClientError as e:
                  logger.error("An error occured: %s" %e)

  # Lambda Execution role with needed IAM permissions  
  CloudTrailStartLoggingIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - # allow Lambda service to use this role
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              "sts:AssumeRole"
      Path: "/"
      Policies:
      - PolicyName: inline
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            # can start logging on any trail
          - Effect: Allow
            Action:
            - cloudtrail:StartLogging
            Resource: "*"
            # can send a message to one SNS topic
          - Effect: Allow
            Action:
            - sns:Publish
            Resource: !Ref CloudTrailStartLoggingSNSTopic
            # can write logs in CloudWatchLogs
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"


  # EventBridge event forwards Security Hub finding to Lambda
  CloudTrailStartLoggingEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "CloudTrail - start logging if trail stopped"
      # pattern matches the nested JSON format of a specific Security Hub finding
      EventPattern:
        source:
        - aws.securityhub
        detail-type:
          - "Security Hub Findings - Imported"
        detail:
          findings:
            Types:
              - "TTPs/Defense Evasion/Stealth:IAMUser-CloudTrailLoggingDisabled"
      State: "ENABLED"
      Targets:
        - # invokes the Lambda function if pattern is matched
          Arn: !GetAtt CloudTrailStartLoggingLambda.Arn
          Id: "SecurityResponseAutomation-CloudTrailLoggingRemediation"

  # Gives EventBridge service permissions to invoke the Lambda function
  CloudTrailStartLoggingInvokePermissions:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref "CloudTrailStartLoggingLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"

  # defines the SNS topic with email address as the only subscriber
  CloudTrailStartLoggingSNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint: !Ref SecurityContactEmail
          Protocol: "email"

Outputs:
  LambdaFunction:
    Description: Lambda Function that restarts CloudTrail logging.
    Value: !Sub https://console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${CloudTrailStartLoggingLambda}
  EventBridgeRule:
    Description: EventBridge rule that invokes the lambda function.
    Value: !Sub https://console.aws.amazon.com/events/home?region=${AWS::Region}#/eventbus/default/rules/${CloudTrailStartLoggingEventRule}